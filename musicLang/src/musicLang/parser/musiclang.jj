PARSER_BEGIN(musiclang)

package musicLang.parser;

import javax.sound.midi.MidiUnavailableException;
import java.util.ArrayList;

import musicLang.*;

public class musiclang {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException, MidiUnavailableException {
    if (args.length == 0)
    {
        System.out.println("Reading input from command line");
        musiclang parser = new musiclang(System.in);
    }
    else
    {
        System.out.println("Reading input from file as argument");
        try {
            musiclang parser = new musiclang(new java.io.FileInputStream(args[0]));
          } catch (java.io.FileNotFoundException e) {
            System.out.println("File not found.");
            return;
          }
    }

    musiclang.CompilationUnit();

  }

}

PARSER_END(musiclang)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <L: "(">
| <R: ")">
| <C: ",">
| < PitchToken: ["A"-"Z"] >
| < DurationToken: ["w","h","q"] >
| < TrackToken: "@" >
| < PlayToken: ">" >
| < InstrumentIdToken: "i" >
| < InstrumentNumToken: (["A"-"Z"])+ >
}

void CompilationUnit() throws MidiUnavailableException:
{MusicTrack track; }
{
  track = TrackInput()
  ( track = NoteInput(track) )*
  ( PlayInput(track) )*
  <EOF>
  {}
}

MusicTrack TrackInput() throws MidiUnavailableException:
{Token trackTk; MusicTrack track;}
{
  trackTk=<TrackToken>

  {
    System.out.println("The track has begun: " + trackTk);
    try{
    track = new MusicTrack();
    return track;
    }
    catch(Exception e)
    {
    e.printStackTrace();
    }

    }
}

MusicTrack NoteInput(MusicTrack track) throws MidiUnavailableException:
{Token pitch; Token dur; Note note;}
{
  <L> pitch=<PitchToken> <C> dur=<DurationToken> <R>
  { System.out.println("The input Pitch is: " + pitch + " The input Duration is: " + dur);
    switch(dur.toString())
    {
        case "w":
        track.setDurations(1);
        track.setPitches(new Pitch(pitch.toString().charAt(0)));
        break;
        case "h":
        track.setDurations(0.5);
        track.setPitches(new Pitch(pitch.toString().charAt(0)));
        break;
        case "q":
        track.setDurations(0.25);
        track.setPitches(new Pitch(pitch.toString().charAt(0)));
        break;
    }
    return track;
  }
}

void PlayInput(MusicTrack track) throws MidiUnavailableException:
{Token play; Token instType;}
{
  play=<PlayToken> <InstrumentIdToken> instType=<InstrumentNumToken>
  { System.out.println("The track will be played on " + instType + " Instrument");
    for(int i=0; i < track.pitches.size(); i++)
    {
        switch(instType.toString().toLowerCase())
        {
            case "piano":
            track.addNote(new Note(track.durations.get(i), track.pitches.get(i), MusicInstrument.PIANO));
            break;
            case "drums":
            track.addNote(new Note(track.durations.get(i), track.pitches.get(i), MusicInstrument.STEEL_DRUMS));
            break;
            case "harmonica":
            track.addNote(new Note(track.durations.get(i), track.pitches.get(i), MusicInstrument.HARMONICA));
            break;
        }
    }
    try{
    track.play();
    }catch(Exception e)
    {
        e.printStackTrace();
    }
  }
}